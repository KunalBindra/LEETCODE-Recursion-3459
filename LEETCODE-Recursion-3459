class Solution {
    int[][] dir = {{1,1},{1,-1},{-1,-1},{-1,1}};
    int m, n;
    int[][][][] t;

    private int solve(int i, int j, int d, int CT, int val, int[][] grid) {
        int i_ = i + dir[d][0];
        int j_ = j + dir[d][1];

        if (i_ < 0 || i_ >= m || j_ < 0 || j_ >= n || grid[i_][j_] != val) {
            return 0;
        }

        if (t[i_][j_][d][CT] != -1) {
            return t[i_][j_][d][CT];
        }

        int nextval = (val == 2 ? 0 : 2);
        int result = 0;

        int KM = 1 + solve(i_, j_, d, CT, nextval, grid);
        result = Math.max(result, KM);

        if (CT == 1) {  // allow one turn
            int TAM = 1 + solve(i_, j_, (d+1)%4, 0, nextval, grid);
            result = Math.max(result, TAM);
        }

        return t[i_][j_][d][CT] = result;
    }

    public int lenOfVDiagonal(int[][] grid) {
        m = grid.length;
        n = grid[0].length;
        t = new int[m][n][4][2];

        for (int i=0; i<m; i++) {
            for (int j=0; j<n; j++) {
                for (int d=0; d<4; d++) {
                    for (int c=0; c<2; c++) {
                        t[i][j][d][c] = -1;
                    }
                }
            }
        }

        int result = 0;
        for (int i=0; i<m; i++) {
            for (int j=0; j<n; j++) {
                if (grid[i][j] == 1) {
                    for (int d=0; d<4; d++) {
                        result = Math.max(1 + solve(i, j, d, 1, 2, grid), result);
                    }
                }
            }
        }
        return result;
    }
}
